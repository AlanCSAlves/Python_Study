PASSO A PASSO PRÁTICO PARA O TRATAMENTO GERAL DE DADOS

1️⃣ Importação e carregamento de dados
✅ Use bibliotecas adequadas → pandas, numpy, polars, etc.
✅ Defina tipos de dados ao carregar → Evita consumo excessivo de memória.
✅ Trate encoding e delimitadores → Para evitar problemas com caracteres especiais.

Exemplo:

df = pd.read_csv("dados.csv", dtype={"coluna_id": "int32"}, encoding="utf-8")

2️⃣ Análise e limpeza dos dados
✅ Verifique valores ausentes (NaN) → Use df.isnull().sum() para identificar.
✅ Elimine ou substitua valores inconsistentes → Exemplo: df.fillna(média).
✅ Remova duplicatas → df.drop_duplicates(inplace=True).
✅ Trate outliers → Utilize df.describe() e gráficos (boxplot) para analisar.

Exemplo:

df.dropna(subset=["coluna_critica"], inplace=True)  # Remove linhas com valores nulos
df["preco"].fillna(df["preco"].median(), inplace=True)  # Substitui NaN pela mediana

3️⃣ Transformação e padronização dos dados
✅ Converta colunas para o tipo correto → Evita erros em cálculos e análises.
✅ Normalize e padronize valores → Para melhor consistência nos dados.
✅ Use expressões regulares (regex) para limpeza → Remova caracteres indesejados.

Exemplo:

df["data"] = pd.to_datetime(df["data"], format="%Y-%m-%d")  # Converte para datetime
df["nome"] = df["nome"].str.lower().str.strip()  # Remove espaços extras e padroniza
df["cep"] = df["cep"].str.replace(r"\D", "", regex=True)  # Remove caracteres não numéricos

4️⃣ Tratamento de dados categóricos e numéricos
✅ Use One-Hot Encoding ou Label Encoding para variáveis categóricas.
✅ Escalone variáveis numéricas (StandardScaler, MinMaxScaler) para modelagem.

Exemplo:

from sklearn.preprocessing import LabelEncoder, MinMaxScaler

df["categoria"] = LabelEncoder().fit_transform(df["categoria"])  # Transforma categorias em números
df[["salario"]] = MinMaxScaler().fit_transform(df[["salario"]])  # Normaliza entre 0 e 1

5️⃣ Eficiência e otimização
✅ Reduza o consumo de memória → Use astype() para otimizar tipos de dados.
✅ Evite loops desnecessários → Prefira operações vetorizadas (apply, map).
✅ Use chunk_size para grandes arquivos → Processamento mais eficiente.

Exemplo:

df["id"] = df["id"].astype("int32")  # Otimiza o uso de memória
df["preco"] = df["preco"].apply(lambda x: x * 1.1 if x > 100 else x)  # Usa apply ao invés de loop

6️⃣ Análise e visualização
✅ Gere relatórios automáticos → Use ydata_profiling.
✅ Visualize padrões e outliers → Use seaborn e matplotlib.
✅ Verifique correlações entre variáveis → df.corr() + heatmap.

Exemplo:

import seaborn as sns
import matplotlib.pyplot as plt

sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
plt.show()

7️⃣ Exportação e armazenamento
✅ Escolha o formato adequado (CSV, Parquet, SQL).
✅ Evite reprocessamento desnecessário → Salve versões limpas dos dados.

Exemplo:

df.to_csv("dados_limpos.csv", index=False, encoding="utf-8")
df.to_parquet("dados_limpos.parquet", index=False)  # Mais eficiente para grandes volumes
